)
0.05556/252
0.05556*252
0.05556*365.25
AmericanCallOpt::am_call_bin_propdiv(S0, 450, rf, 0.1293983, 0.05555556, 252, matrix(c(11/252)), matrix(c(0.003556)))
11/252
15/252
AmericanCallOpt::am_call_bin_propdiv(S0, 450, rf, 0.1293983, 0.05555556, 252, matrix(c(11/252)), matrix(c(0.003556)))
AmericanCallOpt::am_call_bin_propdiv(S0, 450, rf, 0.1293983, 0.05555556, 252, matrix(c(0.04365)), matrix(c(0.003556)))
AmericanCallOpt::am_call_bin_propdiv(S0, 450, rf, 0.1293983, 0.05555556, 252, matrix(c(1)), matrix(c(0.003556)))
AmericanCallOpt::am_call_bin_propdiv(S0, 450, rf, 0.1293983, 0.05555556, 252, matrix(c(-4)), matrix(c(0.003556)))
AmericanCallOpt::am_call_bin_propdiv(S0, 450, rf, 0.1293983, 0.05555556, 252, matrix(c(0)), matrix(c(0.003556)))
AmericanCallOpt::am_call_bin_propdiv(S0, 450, rf, 0.1293983, 0.05555556, 252, matrix(c(00.05555555)), matrix(c(0.003556)))
AmericanCallOpt::am_call_bin_propdiv(S0, 450, rf, 0.1293983, 0.05555556, 252, matrix(c(00.05555556)), matrix(c(0.003556)))
AmericanCallOpt::am_call_bin_propdiv(S0, 450, rf, 0.1293983, 0.05555556, 252, matrix(c(0.05555557)), matrix(c(0.003556)))
AmericanCallOpt::am_call_bin_propdiv(S0, 450, rf, 0.1293983, 0.05555556, 252, matrix(c(0.05555554)), matrix(c(0.003556)))
AmericanCallOpt::am_call_bin_propdiv(S0, 450, rf, 0.1293983, 0.05555556, 252, matrix(c(0.05555553)), matrix(c(0.003556)))
AmericanCallOpt::am_call_bin_propdiv(S0, 450, rf, 0.1293983, 0.05555556, 252, matrix(c(0.055551)), matrix(c(0.003556)))
AmericanCallOpt::am_call_bin_propdiv(S0, 450, rf, 0.1293983, 0.05555556, 252, matrix(c(0.0552)), matrix(c(0.003556)))
AmericanCallOpt::am_call_bin_propdiv(S0, 450, rf, 0.1293983, 0.05555556, 252, matrix(c(0.045)), matrix(c(0.003556)))
AmericanCallOpt::am_call_bin_propdiv(S0, 450, rf, 0.1293983, 0.05555556, 252, matrix(c(0.043)), matrix(c(0.003556)))
AmericanCallOpt::am_call_bin_propdiv(S0, 450, rf, 0.1293983, 0.05555556, 252, matrix(c(0.05555559)), matrix(c(0.003556)))
AmericanCallOpt::am_call_bin_propdiv(S0, 450, rf, 0.1293983, 0.05555556, 252, matrix(c(0.056)), matrix(c(0.003556)))
AmericanCallOpt::am_call_bin_propdiv(S0, 450, rf, 0.1293983, 28/252, 252, matrix(c(24/252)), matrix(c(0.003556)))
AmericanCallOpt::am_call_bin_propdiv(S0, 450, rf, 0.1293983, 28/252, 252, matrix(c(30/252)), matrix(c(0.003556)))
american_option_price(S0 = S0, r = rf, sigma = 0.1293983, tau = 0.05555556, K = 450, steps = 252, opt_type = "call", div_sched = div_sched_calc(0.05555556, 0.25, 1.56, 11/252))
american_option_price(S0 = S0, r = rf, sigma = 0.1293983, tau = 0.05555556, K = 450, steps = 252, opt_type = "call", div_sched = div_sched_calc(0.05555556, 0.25, 1.56, 20/252))
american_option_price(S0 = S0, r = rf, sigma = 0.1293983, tau = 0.05555556, K = 450, steps = 252, opt_type = "call", div_sched = div_sched_calc(0.05555556, 0.25, 1.56, 4/252))
AmericanCallOpt::am_call_bin_propdiv(S0, 450, rf, 0.1293983, 28/252, 252, matrix(c(15/252)), matrix(c(0.003556)))
AmericanCallOpt::am_call_bin_propdiv(S0, 450, rf, 0.1293983, 28/252, 252, matrix(c(15/252)), matrix(c(0.003556)))
AmericanCallOpt::am_call_bin_propdiv(S0, 450, rf, 0.1293983, 0.05555556, 252, matrix(c(15/252)), matrix(c(0.003556)))
AmericanCallOpt::am_call_bin_propdiv(S0, 450, rf, 0.1293983, 0.05555556, 252, matrix(c(11/252)), matrix(c(0.003556)))
calls$est = apply(calls, 1, function(row)
AmericanCallOpt::am_call_bin_propdiv(
S = S0,
K = row["Strike"],
r = rf,
sigma = row["IVM"],
t = row["tau"],
steps = N,
# data was from 12/01/23, next ex_div date is 12/16/23 -> 11 trading days
dividend_times = matrix(ifelse(row["tau"] >= 0.25, seq(11/252, row["tau"], by=0.25), NULL)),
dividend_yields = rep(0.003556, length(matrix(ifelse(row["tau"] >= 0.25, seq(11/252, row["tau"], by=0.25), NULL))))
)
)
calls$est = apply(calls, 1, function(row)
AmericanCallOpt::am_call_bin_propdiv(
S = S0,
K = row["Strike"],
r = rf,
sigma = row["IVM"],
t = row["tau"],
steps = N,
# data was from 12/01/23, next ex_div date is 12/16/23 -> 11 trading days
dividend_times = matrix(ifelse(row["tau"] >= 0.25, seq(11/252, row["tau"], by=0.25), c())),
dividend_yields = rep(0.003556, length(matrix(ifelse(row["tau"] >= 0.25, seq(11/252, row["tau"], by=0.25), c()))))
)
)
rep(1, 0)
rep(1, length(c()))
length(c())
calls$est = apply(calls, 1, function(row)
AmericanCallOpt::am_call_bin_propdiv(
S = S0,
K = row["Strike"],
r = rf,
sigma = row["IVM"],
t = row["tau"],
steps = N,
# data was from 12/01/23, next ex_div date is 12/16/23 -> 11 trading days
dividend_times = matrix(ifelse(row["tau"] >= 0.25, seq(11/252, row["tau"], by=0.25), c())),
dividend_yields = rep(0.003556, length(matrix(ifelse(row["tau"] >= 0.25, seq(11/252, row["tau"], by=0.25), c()))))
)
)
rep(1, length.out = 0)
calls$est = apply(calls, 1, function(row)
AmericanCallOpt::am_call_bin_propdiv(
S = S0,
K = row["Strike"],
r = rf,
sigma = row["IVM"],
t = row["tau"],
steps = N,
# data was from 12/01/23, next ex_div date is 12/16/23 -> 11 trading days
dividend_times = matrix(ifelse(row["tau"] >= 0.25, seq(11/252, row["tau"], by=0.25), c())),
dividend_yields = matrix(rep(0.003556, length(matrix(ifelse(row["tau"] >= 0.25, seq(11/252, row["tau"], by=0.25), c())))))
)
)
calls$est = apply(calls, 1, function(row)
AmericanCallOpt::am_call_bin_propdiv(
S = S0,
K = row["Strike"],
r = rf,
sigma = row["IVM"],
t = row["tau"],
steps = N,
# data was from 12/01/23, next ex_div date is 12/16/23 -> 11 trading days
dividend_times = matrix(ifelse(row["tau"] >= 0.25, seq(11/252, row["tau"], by=0.25), c())),
dividend_yields = matrix(rep(0.003556, length(ifelse(row["tau"] >= 0.25, seq(11/252, row["tau"], by=0.25), c()))))
)
)
calls$est = apply(calls, 1, function(row)
AmericanCallOpt::am_call_bin_propdiv(
S = S0,
K = row["Strike"],
r = rf,
sigma = row["IVM"],
t = row["tau"],
steps = N,
# data was from 12/01/23, next ex_div date is 12/16/23 -> 11 trading days
dividend_times = matrix(ifelse(row["tau"] >= 0.25, seq(11/252, row["tau"], by=0.25), c())),
dividend_yields = matrix(ifelse(row["tau"] >= 0.25, rep(0.003556, length(seq(11/252, row["tau"], by=0.25)), c())))
)
calls$est = apply(calls, 1, function(row)
calls$est = apply(calls, 1, function(row)
AmericanCallOpt::am_call_bin_propdiv(
S = S0,
K = row["Strike"],
r = rf,
sigma = row["IVM"],
t = row["tau"],
steps = N,
# data was from 12/01/23, next ex_div date is 12/16/23 -> 11 trading days
dividend_times = matrix(ifelse(row["tau"] >= 0.25, seq(11/252, row["tau"], by=0.25), c())),
dividend_yields = matrix(ifelse(row["tau"] >= 0.25, rep(0.003556, length(seq(11/252, row["tau"], by=0.25))), c()))
)
)
calls$est = apply(calls, 1, function(row)
AmericanCallOpt::am_call_bin_propdiv(
S = S0,
K = row["Strike"],
r = rf,
sigma = row["IVM"],
t = row["tau"],
steps = N,
# data was from 12/01/23, next ex_div date is 12/16/23 -> 11 trading days
dividend_times = matrix(ifelse(row["tau"] >= 0.25, seq(11/252, row["tau"], by=0.25), c())),
dividend_yields = matrix(ifelse(row["tau"] >= 0.25, rep(0.003556, length(seq(11/252, row["tau"], by=0.25))), c()))
)
)
calls$est = apply(calls, 1, function(row)
AmericanCallOpt::am_call_bin_propdiv(
S = S0,
K = row["Strike"],
r = rf,
sigma = row["IVM"],
t = row["tau"],
steps = N,
# data was from 12/01/23, next ex_div date is 12/16/23 -> 11 trading days
dividend_times = matrix(ifelse(row["tau"] >= 0.25, seq(11/252, row["tau"], by=0.25), c())),
dividend_yields = matrix(ifelse(row["tau"] >= 0.25, rep(0.003556, length(seq(11/252, row["tau"], by=0.25)), c())))
)
)
t=0.05555556
matrix(ifelse(t >= 0.25, seq(11/252, t, by=0.25), c()))
t
t >= 0.25
matrix(ifelse(t < 0.25, c(), seq(11/252, t, by=0.25)))
c()
NULL
matrix(ifelse(t < 0.25, NULL, seq(11/252, t, by=0.25)))
ifelse(t < 0.25, c(), seq(11/252, t, by=0.25))
seq(11/252, t, by=0.25)
div_sched_calc = function(tau, freq, amt, time_till_next_exdiv=freq) {
if (tau < time_till_next_exdiv) return(NULL)
time = seq(time_till_next_exdiv, tau, freq)
amount = rep(amt, length(time))
return(list(time = time, amount = amount))
}
american_option_price(S0, rf, 0.1293983, 0.05555556, 450, 252, div_sched_calc(0.05555556, 0.25, 1.56, 11/252))
american_option_price(S0, rf, 0.1293983, 0.05555556, 450, 252, div_sched_calc(0.05555556, 0.25, 1.56, 15/252))
div_sched_calc = function(tau, freq, amt, time_till_next_exdiv=freq) {
if (tau < time_till_next_exdiv) return(NULL)
time = seq(time_till_next_exdiv, tau, freq)
amount = rep(amt, length(time))
return(list(time = time, amount = amount))
}
div_sched_calc(0.05555556, 0.25, 1.56, 15/252)
american_option_price(S0, rf, 0.1293983, 0.05555556, 450, 252, "call", div_sched_calc(0.05555556, 0.25, 1.56, 15/252))
american_option_price(S0, rf, 0.1293983, 0.05555556, 450, 252, "call", div_sched_calc(0.05555556, 0.25, 1.56, 11/252))
american_option_price(S0, rf, 0.1293983, 0.05555556, 450, 252, "call", div_sched_calc(0.05555556, 0.25, 1.56, 11))
american_option_price(S0, rf, 0.1293983, 0.05555556, 450, 252, "call", div_sched_calc(0.05555556, 0.25, 1.56, 11/252))
calls$est = apply(calls, 1, function(row)
american_option_price(
S0 = S0,
r = rf,
sigma = row["IVM"],
tau = row["tau"],
K = row["Strike"],
steps = N,
opt_type = "call",
# data was from 12/01/23, next ex_div data is 12/16/23 -> 16-1=15 days
div_sched = div_sched_calc(row["tau"], div_freq, div_amt, 11/252)
)
)
calls
calls$est = apply(calls, 1, function(row)
american_option_price(
S0 = S0,
r = rf,
sigma = row["IVM"],
tau = row["tau"],
K = row["Strike"],
steps = 1000,
opt_type = "call",
# data was from 12/01/23, next ex_div data is 12/16/23 -> 16-1=15 days
div_sched = div_sched_calc(row["tau"], div_freq, div_amt, 11/252)
)
)
calls
puts$est = apply(puts, 1, function(row)
american_option_price(
S0 = S0,
r = rf,
sigma = row["IVM"],
tau = row["tau"],
K = row["Strike"],
steps = N,
opt_type = "put",
# data was from 12/01/23, next ex_div data is 12/16/23 -> 16-1=15 days
div_sched = div_sched_calc(row["tau"], div_freq, div_amt, 11/252)
)
)
puts
plot(puts$Price)
abline(puts$est)
plot(calls$Price)
lines(calls$est)
plot(calls$Price)
lines(calls$est, lty="o")
plot(calls$Price)
lines(calls$est, lty=2)
plot(calls$Price)
lines(calls$est, lty=4)
plot(calls$Price)
points(calls$est, lty=2)
plot(calls$Price, col="blue")
points(calls$est, col="red")
tail(puts)
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
# Chunk 2: import_data
df = readxl::read_xlsx("grid1_lmr4qsjv.xlsx", skip = 1, col_names = T)
setwd("C:/Users/tejup/OneDrive/Documents/Semester 5 Submissions/FE 620/American_Opt_Pricing")
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
# Chunk 2: import_data
df = readxl::read_xlsx("grid1_lmr4qsjv.xlsx", skip = 1, col_names = T)
# Chunk 3
head(df)
# Chunk 4: parse
# Parse column names
colnames(df) = sapply(strsplit(colnames(df), "\\.{3}"), function(x) x[1])
# Remove null rows
df = df %>% subset(Strike != "ERROR(6)")
# Chunk 5: split
# Split dataset into calls and puts
calls = df %>%
select(1:(ncol(df) %/% 2))
puts = df %>%
select((1 + ncol(df) %/% 2):ncol(df))
# Chunk 6: mid_price
# Option price as mid price
calls = calls %>%
mutate(Price = (calls$Bid + calls$Ask) / 2, IVM = IVM / 100) %>%
select(-Bid, -Ask, -Last, -Volm)
puts = puts %>%
mutate(Price = (puts$Bid + puts$Ask) / 2, IVM = IVM / 100) %>%
select(-Bid, -Ask, -Last, -Volm)
# Chunk 7: calc_tau
# Tau in annual units from contract expiration
data_date = as.Date("12/01/23", "%m/%d/%y")
calls = calls %>%
mutate(tau = as.numeric(as.Date(sub(".*?(\\d{1,2}/\\d{1,2}/\\d{2,4}).*", "\\1", Ticker), "%m/%d/%y") - data_date) / 252) %>% select(-Ticker) %>% mutate_all(as.numeric)
puts = puts %>%
mutate(tau = as.numeric(as.Date(sub(".*?(\\d{1,2}/\\d{1,2}/\\d{2,4}).*", "\\1", Ticker), "%m/%d/%y") - data_date) / 252) %>% select(-Ticker) %>% mutate_all(as.numeric)
# Chunk 8
max(calls$tau) * 12
# Chunk 9: init_params
rf = 0.054
S0 = 458.65
div_freq = 0.25
div_amt = 1.56
N = 200
# Chunk 10
head(calls)
# Chunk 11: option_pricing
american_option_price = function(S0, r, sigma, tau, K, steps, opt_type, div_sched = NULL) {
# Validating the input parameters
if (S0 <= 0 || r <= 0 || sigma <= 0 || tau <= 0 || K <= 0 || steps <= 0) {
stop("Input parameters should be positive and non-zero.")
}
# Calculating the necessary variables
dt = tau / steps  # Time step size
u = exp(sigma * sqrt(dt))  # Up factor
d = 1 / u  # Down factor
p = (exp(r * dt) - d) / (u - d)  # Probability of up movement
# Adjust stock prices for dividends
if (!is.null(div_sched)) {
for (i in seq_along(div_sched$time)) {
time = div_sched$time[i]
amount = div_sched$amount[i]
discount_factor = exp(-r * time)
S0 = S0 - amount * discount_factor
}
}
# Creating a 2D array to store the stock prices at each node of the tree
stock_prices = matrix(0, nrow = steps + 1, ncol = steps + 1)
# Calculating the stock prices at each node of the tree
for (i in seq(1, steps + 1)) {
for (j in seq(1, i)) {
stock_prices[i, j] = S0 * (u ^ (i - j)) * (d ^ (j - 1))
}
}
# Creating a 2D array to store the option values at each node of the tree
option_values = matrix(0, nrow = steps + 1, ncol = steps + 1)
# Calculating the option values at each node of the tree
for (i in seq(steps, 0, -1)) {
for (j in seq(1, i + 1)) {
intr_val = ifelse(opt_type == "put", K - stock_prices[i, j], stock_prices[i, j] - K)
if (i == steps) {
# At the last step, the option value is the maximum of 0 and the intrinsic value
option_values[i, j] = max(0, intr_val)
} else {
# For other steps, the option value is the maximum of the intrinsic value and the discounted expected value
option_values[i, j] = max(intr_val,
(p * option_values[i + 1, j] + (1 - p) * option_values[i + 1, j + 1]) * exp(-r * dt)
)
}
}
}
# Returning the option value at the root node of the tree
return(option_values[1, 1])
}
# Chunk 12: create_div_schedule
div_sched_calc = function(tau, freq, amt, time_till_next_exdiv=freq) {
if (tau < time_till_next_exdiv) return(NULL)
time = seq(time_till_next_exdiv, tau, freq)
amount = rep(amt, length(time))
return(list(time = time, amount = amount))
}
# Chunk 13: apply_call_pricing
calls$est = apply(calls, 1, function(row)
american_option_price(
S0 = S0,
r = rf,
sigma = row["IVM"],
tau = row["tau"],
K = row["Strike"],
steps = N,
opt_type = "call",
# data was from 12/01/23, next ex_div data is 12/16/23 -> 16-1=15 days
div_sched = div_sched_calc(row["tau"], div_freq, div_amt, 11/252)
)
)
# Chunk 14
calls
# Chunk 15: apply_put_pricing
puts$est = apply(puts, 1, function(row)
american_option_price(
S0 = S0,
r = rf,
sigma = row["IVM"],
tau = row["tau"],
K = row["Strike"],
steps = N,
opt_type = "put",
# data was from 12/01/23, next ex_div data is 12/16/23 -> 16-1=15 days
div_sched = div_sched_calc(row["tau"], div_freq, div_amt, 11/252)
)
)
# Chunk 16
tail(puts)
# Chunk 17
plot(calls$Price, col="blue")
points(calls$est, col="red")
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
# Chunk 2: import_data
df = readxl::read_xlsx("grid1_lmr4qsjv.xlsx", skip = 1, col_names = T)
# Chunk 3
head(df)
# Chunk 4: parse
# Parse column names
colnames(df) = sapply(strsplit(colnames(df), "\\.{3}"), function(x) x[1])
# Remove null rows
df = df %>% subset(Strike != "ERROR(6)")
# Chunk 5: split
# Split dataset into calls and puts
calls = df %>%
select(1:(ncol(df) %/% 2))
puts = df %>%
select((1 + ncol(df) %/% 2):ncol(df))
# Chunk 6: mid_price
# Option price as mid price
calls = calls %>%
mutate(Price = (calls$Bid + calls$Ask) / 2, IVM = IVM / 100) %>%
select(-Bid, -Ask, -Last, -Volm)
puts = puts %>%
mutate(Price = (puts$Bid + puts$Ask) / 2, IVM = IVM / 100) %>%
select(-Bid, -Ask, -Last, -Volm)
# Chunk 7: calc_tau
# Tau in annual units from contract expiration
data_date = as.Date("12/01/23", "%m/%d/%y")
calls = calls %>%
mutate(tau = as.numeric(as.Date(sub(".*?(\\d{1,2}/\\d{1,2}/\\d{2,4}).*", "\\1", Ticker), "%m/%d/%y") - data_date) / 252) %>% select(-Ticker) %>% mutate_all(as.numeric)
puts = puts %>%
mutate(tau = as.numeric(as.Date(sub(".*?(\\d{1,2}/\\d{1,2}/\\d{2,4}).*", "\\1", Ticker), "%m/%d/%y") - data_date) / 252) %>% select(-Ticker) %>% mutate_all(as.numeric)
# Chunk 8
max(calls$tau) * 12
# Chunk 9: init_params
rf = 0.054
S0 = 458.65
div_freq = 0.25
div_amt = 1.61
N = 200
# Chunk 10
head(calls)
# Chunk 11: option_pricing
american_option_price = function(S0, r, sigma, tau, K, steps, opt_type, div_sched = NULL) {
# Validating the input parameters
if (S0 <= 0 || r <= 0 || sigma <= 0 || tau <= 0 || K <= 0 || steps <= 0) {
stop("Input parameters should be positive and non-zero.")
}
# Calculating the necessary variables
dt = tau / steps  # Time step size
u = exp(sigma * sqrt(dt))  # Up factor
d = 1 / u  # Down factor
p = (exp(r * dt) - d) / (u - d)  # Probability of up movement
# Adjust stock prices for dividends
if (!is.null(div_sched)) {
for (i in seq_along(div_sched$time)) {
time = div_sched$time[i]
amount = div_sched$amount[i]
discount_factor = exp(-r * time)
S0 = S0 - amount * discount_factor
}
}
# Creating a 2D array to store the stock prices at each node of the tree
stock_prices = matrix(0, nrow = steps + 1, ncol = steps + 1)
# Calculating the stock prices at each node of the tree
for (i in seq(1, steps + 1)) {
for (j in seq(1, i)) {
stock_prices[i, j] = S0 * (u ^ (i - j)) * (d ^ (j - 1))
}
}
# Creating a 2D array to store the option values at each node of the tree
option_values = matrix(0, nrow = steps + 1, ncol = steps + 1)
# Calculating the option values at each node of the tree
for (i in seq(steps, 0, -1)) {
for (j in seq(1, i + 1)) {
intr_val = ifelse(opt_type == "put", K - stock_prices[i, j], stock_prices[i, j] - K)
if (i == steps) {
# At the last step, the option value is the maximum of 0 and the intrinsic value
option_values[i, j] = max(0, intr_val)
} else {
# For other steps, the option value is the maximum of the intrinsic value and the discounted expected value
option_values[i, j] = max(intr_val,
(p * option_values[i + 1, j] + (1 - p) * option_values[i + 1, j + 1]) * exp(-r * dt)
)
}
}
}
# Returning the option value at the root node of the tree
return(option_values[1, 1])
}
# Chunk 12: create_div_schedule
div_sched_calc = function(tau, freq, amt, time_till_next_exdiv=freq) {
if (tau < time_till_next_exdiv) return(NULL)
time = seq(time_till_next_exdiv, tau, freq)
amount = rep(amt, length(time))
return(list(time = time, amount = amount))
}
# Chunk 13: apply_call_pricing
calls$est = apply(calls, 1, function(row)
american_option_price(
S0 = S0,
r = rf,
sigma = row["IVM"],
tau = row["tau"],
K = row["Strike"],
steps = N,
opt_type = "call",
# data was from 12/01/23, next ex_div data is 12/16/23 -> 16-1=15 days
div_sched = div_sched_calc(row["tau"], div_freq, div_amt, 11/252)
)
)
# Chunk 14
calls
# Chunk 15: apply_put_pricing
puts$est = apply(puts, 1, function(row)
american_option_price(
S0 = S0,
r = rf,
sigma = row["IVM"],
tau = row["tau"],
K = row["Strike"],
steps = N,
opt_type = "put",
# data was from 12/01/23, next ex_div data is 12/16/23 -> 16-1=15 days
div_sched = div_sched_calc(row["tau"], div_freq, div_amt, 11/252)
)
)
# Chunk 16
tail(puts)
# Chunk 17
plot(calls$Price, col="blue")
points(calls$est, col="red")
tail(calls)
