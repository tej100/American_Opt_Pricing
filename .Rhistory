lines(tail(train, 5), col="darkgrey")
points(test, col = "darkgreen", pch = 19)
lines(test, col="darkgreen")
points(forecast.ar, col="darkblue")
lines(forecast.ar, col="darkblue")
legend("topright", legend = c("Train", "Test", "Prediction"), col = c("darkgrey", "darkgreen", "darkblue"), pch = 1)
plot(tail(spy$lr, 10), type = "b", col="black", main="Log Returns of last 10 days", xlab="Date", ylab="log returns")
points(tail(train, 5), col = "darkgrey", pch = 19)
lines(tail(train, 5), col="darkgrey")
points(test, col = "darkgreen", pch = 19)
lines(test, col="darkgreen")
points(forecast.ar, col="darkblue", pch = 19)
lines(forecast.ar, col="darkblue")
legend("topright", legend = c("Train", "Test", "Prediction"), col = c("darkgrey", "darkgreen", "darkblue"), pch = 1)
plot(tail(spy$lr, 10), type = "b", col="black", main="Log Returns of last 10 days", xlab="Date", ylab="log returns")
points(tail(train, 5), col = "darkgrey", pch = 19)
lines(tail(train, 5), col="darkgrey")
# points(test, col = "darkgreen", pch = 19)
# lines(test, col="darkgreen")
points(forecast.ar, col="darkblue", pch = 19)
lines(forecast.ar, col="darkblue")
legend("topright", legend = c("Train", "Test", "Prediction"), col = c("darkgrey", "darkgreen", "darkblue"), pch = 1)
plot(tail(train, 5), type = "b", col="black", main="Log Returns of last 10 days", xlab="Date", ylab="log returns")
points(tail(train, 5), col = "darkgrey", pch = 19)
lines(tail(train, 5), col="darkgrey")
# points(test, col = "darkgreen", pch = 19)
# lines(test, col="darkgreen")
points(forecast.ar, col="darkblue", pch = 19)
lines(forecast.ar, col="darkblue")
legend("topright", legend = c("Train", "Test", "Prediction"), col = c("darkgrey", "darkgreen", "darkblue"), pch = 1)
plot(tail(train, 5), type = "b", col="black", main="Log Returns of last 10 days", xlab="Date", ylab="log returns", ylim=c(0,10))
points(tail(train, 5), col = "darkgrey", pch = 19)
lines(tail(train, 5), col="darkgrey")
# points(test, col = "darkgreen", pch = 19)
# lines(test, col="darkgreen")
points(forecast.ar, col="darkblue", pch = 19)
lines(forecast.ar, col="darkblue")
legend("topright", legend = c("Train", "Test", "Prediction"), col = c("darkgrey", "darkgreen", "darkblue"), pch = 1)
plot(tail(train, 5), type = "b", col="black", main="Log Returns of last 10 days", xlab="Date", ylab="log returns", ylim=index(tail(spy, 10)))
points(tail(train, 5), col = "darkgrey", pch = 19)
lines(tail(train, 5), col="darkgrey")
# points(test, col = "darkgreen", pch = 19)
# lines(test, col="darkgreen")
points(forecast.ar, col="darkblue", pch = 19)
lines(forecast.ar, col="darkblue")
legend("topright", legend = c("Train", "Test", "Prediction"), col = c("darkgrey", "darkgreen", "darkblue"), pch = 1)
plot(tail(train, 5), type = "b", col="black", main="Log Returns of last 10 days", xlab="Date", ylab="log returns", xlim=index(tail(spy, 10)))
points(tail(train, 5), col = "darkgrey", pch = 19)
lines(tail(train, 5), col="darkgrey")
# points(test, col = "darkgreen", pch = 19)
# lines(test, col="darkgreen")
points(forecast.ar, col="darkblue", pch = 19)
lines(forecast.ar, col="darkblue")
legend("topright", legend = c("Train", "Test", "Prediction"), col = c("darkgrey", "darkgreen", "darkblue"), pch = 1)
plot(index(tail(spy, 10)), c(tail(train, 5), test), type = "l", col = "darkgreen", xlab = "Date", ylab = "Returns")
lines(test_prediction_dates, predictions, col = "darkblue")
plot(index(tail(spy, 10)), c(tail(train, 5), test), type = "l", col = "darkgreen", xlab = "Date", ylab = "Returns")
lines(index(test), predictions, col = "darkblue")
plot(index(tail(spy, 10)), c(tail(train, 5), test), type = "l", col = "darkgreen", xlab = "Date", ylab = "Returns")
lines(index(forecast.ar), forecast.ar, col = "darkblue")
plot(index(tail(spy, 10)), c(tail(train, 5), test), type = "l", col = "darkgreen", xlab = "Date", ylab = "Returns")
lines(rownames(forecast.ar), forecast.ar, col = "darkblue")
plot(index(tail(spy, 10)), c(tail(train, 5), test), type = "l", col = "darkgreen", xlab = "Date", ylab = "Returns")
lines(index(test), forecast.ar, col = "darkblue")
forecast.ar = data.frame(forecast.df)
forecast.ar$Prediction = predict(model.ar, n.ahead=5)$pred
forecast.ar
test
plot(index(tail(spy, 10)), c(tail(train, 5), test), type = "l", col = "darkgreen", xlab = "Date", ylab = "Returns")
lines(index(test), forecast.ar$Prediction, col = "darkblue")
legend("topright", legend = c("Actual Vals", "Predictions"), col = c("darkgreen", "darkblue"), lty = 1)
plot(index(tail(spy, 10)), c(tail(train, 5), test), type = "b", col = "darkgreen", xlab = "Date", ylab = "Returns")
lines(forecast.ar, col = "darkblue")
legend("topright", legend = c("Actual Vals", "Predictions"), col = c("darkgreen", "darkblue"), lty = 1)
plot(index(tail(spy, 10)), c(tail(train, 5), test), type = "b", col = "darkgreen", xlab = "Date", ylab = "Returns")
points(index(test), forecast.ar$Prediction, col="darkblue")
lines(index(test), forecast.ar$Prediction, col = "darkblue")
legend("topright", legend = c("Actual Vals", "Predictions"), col = c("darkgreen", "darkblue"), lty = 1)
plot(index(tail(spy, 10)), c(tail(train, 5), test), type = "b", col = "darkgreen", xlab = "Date", ylab = "Returns")
plot(index(tail(spy, 10)), c(tail(train, 5), test), type = "b", col = "darkgreen", xlab = "Date", ylab = "Returns")
points(index(test), forecast.ar$Prediction, col="darkblue")
lines(index(test), forecast.ar$Prediction, col = "darkblue")
legend("topright", legend = c("Actual Vals", "Predictions"), col = c("darkgreen", "darkblue"), lty = 1)
plot(index(tail(spy, 10)), c(tail(train, 5), test), type = "p", col = "darkgreen", xlab = "Date", ylab = "Returns", ylim=c(-0.02, 0.02))
lines(index(tail(spy, 10)), c(tail(train, 5), test), col="darkgreen")
points(index(test), forecast.ar$Prediction, col="darkblue")
lines(index(test), forecast.ar$Prediction, col = "darkblue")
legend("topright", legend = c("Actual Vals", "Predictions"), col = c("darkgreen", "darkblue"), lty = 1)
plot(index(tail(spy, 10)), c(tail(train, 5), test), type = "p", col = "darkgreen", xlab = "Date", ylab = "Returns", ylim=c(-0.015, 0.025))
lines(index(tail(spy, 10)), c(tail(train, 5), test), col="darkgreen")
points(index(test), forecast.ar$Prediction, col="darkblue")
lines(index(test), forecast.ar$Prediction, col = "darkblue")
legend("topright", legend = c("Actual Vals", "Predictions"), col = c("darkgreen", "darkblue"), lty = 1)
-0.001/0.0101
library(devtools)
library(devtools)
# Load the source code for option data collection from GitHub as follows
u <- "https://raw.githubusercontent.com/simaan84/quantmod/master/modified_getOptions.R"
source_url(u)
yesterday = strftime(Sys.Date()-1,"%Y-%m-%d")
View(get_option_data)
View(getOptionChain)
View(getOptionChain.yahoo)
sym <- "ATVI"
ds <- get_option_data(sym)
View(ds)
filepath = paste0("D:/R/FE 530/Options Data ", sym, "/", yesterday, ".csv")
write.csv(ds, filepath, row.names = FALSE)
sym <- "GTLB"
ds <- get_option_data(sym)
filepath = paste0("D:/R/FE 530/Options Data ", sym, "/", yesterday, ".csv")
write.csv(df, filepath, row.names = FALSE)
library(readr)
X2023_10_17 <- read_csv("D:/R/FE 530/Options Data GTLB/2023-10-17.csv")
View(X2023_10_17)
df = read.csv(filepath, header=TRUE)
head(df)
filepath = paste0("D:/R/FE 530/Options Data ", sym, "/", yesterday, ".csv")
df = read.csv(filepath, header=TRUE)
head(df)
sym <- "ATVI"
filepath = paste0("D:/R/FE 530/Options Data ", sym, "/", yesterday, ".csv")
df = read.csv(filepath, header=TRUE)
head(df)
sym <- "GTLB"
filepath = paste0("D:/R/FE 530/Options Data ", sym, "/", yesterday, ".csv")
df = read.csv(filepath, header=TRUE)
ds <- get_option_data(sym)
ds <- get_option_data(sym)
sym <- "ATVI"
ds <- get_option_data(sym)
sym <- "ATVI"
ds <- get_option_data(sym)
filepath = paste0("D:/R/FE 530/Options Data ", sym, "/", yesterday, ".csv")
write.csv(ds, filepath, row.names = FALSE)
View(df)
sym <- "GTLB"
ds <- get_option_data(sym)
filepath = paste0("D:/R/FE 530/Options Data ", sym, "/", yesterday, ".csv")
write.csv(df, filepath, row.names = FALSE)
df = read.csv(filepath, header=TRUE)
head(df)
View(ds)
filepath = paste0("D:/R/FE 530/Options Data ", sym, "/", yesterday, ".csv")
library(devtools)
# Load the source code for option data collection from GitHub as follows
u <- "https://raw.githubusercontent.com/simaan84/quantmod/master/modified_getOptions.R"
source_url(u)
yesterday = strftime(Sys.Date()-1,"%Y-%m-%d")
sym <- "ATVI"
ds <- get_option_data(sym)
filepath = paste0("D:/R/FE 530/Options Data ", sym, "/", yesterday, ".csv")
write.csv(ds, filepath, row.names = FALSE)
sym <- "GTLB"
ds <- get_option_data(sym)
filepath = paste0("D:/R/FE 530/Options Data ", sym, "/", yesterday, ".csv")
write.csv(ds, filepath, row.names = FALSE)
df = read.csv(filepath, header=TRUE)
head(df)
View(ds)
library(shiny)
runGithub("Yahoo_Finance", "simaan84")
runGitHub("Yahoo_Finance", "simaan84")
install.packages("plotly")
runGitHub("Yahoo_Finance", "simaan84")
P=c(905.66, 891.14, 923.32, 907.34, 922.00, 932.00, 904.55, 860.00, 875.76, 922.43, 923.39, 876.35, 856.98, 821.53, 764.04, 800.77, 809.87, 870.43)
head(P)
mean(P)
sd(P)
49.09935*sqrt(252)
P=c(931.25,905.66,891.14,923.32,907.34,922.00,932.00,904.55,860.00,875.76,922.43,923.39,876.35,856.98,821.53,764.04,800.77,809.87,870.43)
P
length(P)
sd(P)
sd(P)*sqrt(252)
783.76/6
P=c(931.25,905.66,891.14,923.32,907.34,922.00,932.00,904.55,860.00,875.76,922.43,923.39,876.35,856.98,821.53,764.04,800.77,809.87,870.43)
r=diff(P, type="log")
r
library(quantmod)
r=dailyReturn(P, type="log")
r <- diff(log(P))
r
mean(r)
sd(r)
n = length(r)
sqrt((n-1)/n) * sd(r)
sqrt((n-1)/n) * sd(r) * sqrt(252)
sd(r) * sqrt(252)
round(r, 2)
round(r, 4)
0.6327/sqrt(2*(n-1))
0.6149/6
0.6327/6
0.6149/sqrt(2*(n-1))
knitr::opts_chunk$set(echo = TRUE)
library(fBasics)
library(quantmod)
library(forecast)
library(FinTS)
library(NTS)
install.packages("NTS")
knitr::opts_chunk$set(echo = TRUE)
library(fBasics)
library(quantmod)
library(forecast)
library(FinTS)
library(NTS)
n = 10000
S0 = 100
r = 0.05
s = 0.25
K = 101
t = 0.5
steps = 3
dt = t/steps
set.seed(20005933)
epsilons = matrix(rnorm(steps*n), nrow=n)
perc.ret = exp((r-0.5*s^2)*dt + s*epsilons*sqrt(dt))
paths = cbind(rep(S0, n), perc.ret)
timesteps = round(seq(0, steps)/steps, 4)
paths = data.frame(apply(paths, 1, cumprod), row.names=timesteps)
head(t(paths))
matplot(row.names(paths), paths, type="l", lty=1, main=sprintf("%d GBM Simulations", n), xlab="Time Step (Annual)", ylab="Stock Price")
St = as.numeric(paths[dim(paths)[1],])
call.payoffs = sapply(St, function(val) max(0, val-K))
put.payoffs = sapply(St, function(val) max(0, K-val))
call.prices = sapply(call.payoffs, function(val) val*exp(-r*t))
put.prices = sapply(put.payoffs, function(val) val*exp(-r*t))
mean(call.prices)
mean(put.prices)
sd(call.prices) / sqrt(length(call.prices))
sd(put.prices) / sqrt(length(put.prices))
n = 100000
steps = 1000
S1 = 50
S2 = 40
s1 = 0.3
s2 = 0.25
rho = 0.8
K = 10
t = 1
dt = t/steps
set.seed(20005933)
e1 = matrix(rnorm(steps*n), nrow=n)
e2 = matrix(rnorm(steps*n), nrow=n)
e2 = rho*e1 + e2*sqrt(1-rho^2)  # Obtain correlated normal sample
percret1 = exp((-0.5*s1^2)*dt + s1*e1*sqrt(dt))
percret2 = exp((-0.5*s2^2)*dt + s2*e2*sqrt(dt))
timesteps = round(seq(0, steps)/steps, 4)
paths1 = cbind(rep(S1, n), percret1)
paths1 = data.frame(apply(paths1, 1, cumprod), row.names=timesteps)
paths2 = cbind(rep(S2, n), percret2)
paths2 = data.frame(apply(paths2, 1, cumprod), row.names=timesteps)
St1 = as.numeric(paths1[dim(paths1)[1],])
St2 = as.numeric(paths2[dim(paths2)[1],])
spread.payoff = mapply(function(x, y) max(x - y - K, 0), St1, St2)
mean(spread.payoff)
n = 1000
steps = 3
S1 = 50
S2 = 40
s1 = 0.3
s2 = 0.25
rho = 0.8
K = 10
t = 1
dt = t/steps
set.seed(20005933)
e1 = matrix(rnorm(steps*n), nrow=n)
e2 = matrix(rnorm(steps*n), nrow=n)
e2 = rho*e1 + e2*sqrt(1-rho^2)  # Obtain correlated normal sample
percret1 = exp((-0.5*s1^2)*dt + s1*e1*sqrt(dt))
percret2 = exp((-0.5*s2^2)*dt + s2*e2*sqrt(dt))
timesteps = round(seq(0, steps)/steps, 4)
paths1 = cbind(rep(S1, n), percret1)
paths1 = data.frame(apply(paths1, 1, cumprod), row.names=timesteps)
paths2 = cbind(rep(S2, n), percret2)
paths2 = data.frame(apply(paths2, 1, cumprod), row.names=timesteps)
percret1 = exp((-0.5*s1^2)*dt + s1*e1*sqrt(dt))
percret2 = exp((-0.5*s2^2)*dt + s2*e2*sqrt(dt))
timesteps = round(seq(0, steps)/steps, 4)
paths1 = cbind(rep(S1, n), percret1)
paths1 = data.frame(apply(paths1, 1, cumprod), row.names=timesteps)
paths2 = cbind(rep(S2, n), percret2)
paths2 = data.frame(apply(paths2, 1, cumprod), row.names=timesteps)
par(mfrow = c(1, 2))
matplot(row.names(paths1), paths1, type="l", lty=1, main=sprintf("%d GBM Simulations Stock 1", n), xlab="Time Step (Annual)", ylab="Stock Price")
matplot(row.names(paths2), paths2, type="l", lty=1, main=sprintf("%d GBM Simulations Stock 2", n), xlab="Time Step (Annual)", ylab="Stock Price")
St1 = as.numeric(paths1[dim(paths1)[1],])
St2 = as.numeric(paths2[dim(paths2)[1],])
spread.payoff = mapply(function(x, y) max(x - y - K, 0), St1, St2)
mean(spread.payoff)
n = 1000
steps = 1
S1 = 50
S2 = 40
s1 = 0.3
s2 = 0.25
rho = 0.8
K = 10
t = 1
dt = t/steps
set.seed(20005933)
e1 = matrix(rnorm(steps*n), nrow=n)
e2 = matrix(rnorm(steps*n), nrow=n)
e2 = rho*e1 + e2*sqrt(1-rho^2)  # Obtain correlated normal sample
percret1 = exp((-0.5*s1^2)*dt + s1*e1*sqrt(dt))
percret2 = exp((-0.5*s2^2)*dt + s2*e2*sqrt(dt))
timesteps = round(seq(0, steps)/steps, 4)
paths1 = cbind(rep(S1, n), percret1)
paths1 = data.frame(apply(paths1, 1, cumprod), row.names=timesteps)
paths2 = cbind(rep(S2, n), percret2)
paths2 = data.frame(apply(paths2, 1, cumprod), row.names=timesteps)
par(mfrow = c(1, 2))
matplot(row.names(paths1), paths1, type="l", lty=1, main=sprintf("%d GBM Simulations Stock 1", n), xlab="Time Step (Annual)", ylab="Stock Price")
matplot(row.names(paths2), paths2, type="l", lty=1, main=sprintf("%d GBM Simulations Stock 2", n), xlab="Time Step (Annual)", ylab="Stock Price")
St1 = as.numeric(paths1[dim(paths1)[1],])
St2 = as.numeric(paths2[dim(paths2)[1],])
spread.payoff = mapply(function(x, y) max(x - y - K, 0), St1, St2)
mean(spread.payoff)
setwd("C:/Users/tejup/OneDrive/Documents/Semester 5 Submissions/FE 620/American_Opt_Pricing")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(ragtop)
install.packages("ragtop")
knitr::opts_chunk$set(echo = TRUE)
library(ragtop)
#S - Price of Stock at t=0
#sig - Volatility of Stock
#r - Risk-free Rate
#N - Number of steps in total
#t - Time to Expiry
#cp - Call or put
#K - Strike
am_price_tree <- function(S,sig,r,N,t,cp,K) {
#Calculate U, D and P-Star
U<-exp(sig*sqrt(t/N))
D<-exp(-sig*sqrt(t/N))
p<-(exp(r*(t/N))-D)/(U-D)
#Create stock price tree
tree <- matrix(0, nrow=N+1, ncol=N+1)
for (i in 1:((N)+1)) {
for (j in 1:i) {
tree[j, i] <- S * (U)^(i-j) * (D)^(j-1)
}
}
opt_tree <- matrix(0, nrow=N+1, ncol=N+1)
#if call do
if(cp=="c"){
#Calculate value at last day
for(x in c(1:(N+1))){
opt_tree[x, (N)+1] <- max(tree[x, N+1]-K,0)
}
#Go back each step while comparing continuation value vs exercise value
for (i in seq((N),1,-1)) {
for (j in c(0:i)) {
ex_now<-max(tree[j,i]-K,0)
opt_tree[j, i] <- max(ex_now,(p*(opt_tree[j, i+1]) + (1-p) * (opt_tree[j+1, i+1]))*exp(r * (t/N)))
}
}
#Print Call Price
#print("American Call Price: ")
#print(opt_tree[1,1])
}
#if put do(same as call pretty much)
else{
for(x in c(0:(N)+1)){
opt_tree[x, (N)+1] <- max(K-tree[x, N+1],0)
}
for (i in seq((N),1,-1)) {
for (j in c(0:i)) {
ex_now<-max(K-tree[j,i],0)
opt_tree[j, i] <- max(ex_now,(p*(opt_tree[j, i+1]) + (1-p) * (opt_tree[j+1, i+1]))*exp(r * (t/N)))
}
}
#print("American Put Price: ")
#print(opt_tree[1,1])
}
#Create Delta Tree and Calculate Delta
delta_tree <- matrix(0, nrow=N, ncol=N)
for (i in seq(1,N,1)) {
for (j in c(1:i)) {
delta_tree[j, i] <- (opt_tree[j,i+1]-opt_tree[j+1,i+1])/(tree[j,i+1]-tree[j+1,i+1])
}
}
#Output option price tree and delta tree
#print("Option Price Tree: ")
#print(opt_tree)
#print("Delta Tree: ")
#print(delta_tree)
return(opt_tree[1,1])
}
am_price_tree(418,.25,.05,6,1,"c",415)
AmericanCallOpt::am_call_bin(418,415,0.05,0.25,1,6)
#See convergence
prices<-c()
for(i in seq(1,252,2)){
prices<-c(prices,am_price_tree(418,.25,.05,i,1,"c",415))
}
plot(prices)
lines(prices)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
df = readxl::read_xlsx("grid1_lmr4qsjv.xlsx", skip = 1, col_names = T)
head(df)
# Parse column names
colnames(df) = sapply(strsplit(colnames(df), "\\.{3}"), function(x) x[1])
# Remove null rows
df = df %>% subset(Strike != "ERROR(6)")
# Split dataset into calls and puts
calls = df %>%
select(1:(ncol(df) %/% 2))
puts = df %>%
select((1 + ncol(df) %/% 2):ncol(df))
# Option price as mid price
calls = calls %>%
mutate(Price = (calls$Bid + calls$Ask) / 2, IVM = IVM / 100) %>%
select(-Bid, -Ask, -Last, -Volm)
puts = puts %>%
mutate(Price = (puts$Bid + puts$Ask) / 2, IVM = IVM / 100) %>%
select(-Bid, -Ask, -Last, -Volm)
# Tau in annual units from contract expiration
data_date = as.Date("12/01/23", "%m/%d/%y")
calls = calls %>%
mutate(tau = as.numeric(as.Date(sub(".*?(\\d{1,2}/\\d{1,2}/\\d{2,4}).*", "\\1", Ticker), "%m/%d/%y") - data_date) / 252) %>% select(-Ticker) %>% mutate_all(as.numeric)
puts = puts %>%
mutate(tau = as.numeric(as.Date(sub(".*?(\\d{1,2}/\\d{1,2}/\\d{2,4}).*", "\\1", Ticker), "%m/%d/%y") - data_date) / 252) %>% select(-Ticker) %>% mutate_all(as.numeric)
max(calls$tau) * 12
rf = 0.054
S0 = 458.65
div_freq = 0.25
div_amt = 1.56
# calls = calls %>% mutate(rf = rf, S0 = S0) %>% select(-Ticker) %>% mutate_all(as.numeric)
# puts = puts %>% mutate(rf = rf, S0 = S0) %>% select(-Ticker) %>% mutate_all(as.numeric)
N = 252
head(calls)
american_option_price = function(S0, r, sigma, tau, K, steps, opt_type, div_sched = NULL) {
# Validating the input parameters
if (S0 <= 0 || r <= 0 || sigma <= 0 || tau <= 0 || K <= 0 || steps <= 0) {
stop("Input parameters should be positive and non-zero.")
}
# Calculating the necessary variables
dt = tau / steps  # Time step size
u = exp(sigma * sqrt(dt))  # Up factor
d = 1 / u  # Down factor
p = (exp(r * dt) - d) / (u - d)  # Probability of up movement
# Adjust stock prices for dividends
if (!is.null(div_sched)) {
for (i in seq_along(div_sched$time)) {
time = div_sched$time[i]
amount = div_sched$amount[i]
discount_factor = exp(-r * time)
S0 = S0 - amount * discount_factor
}
}
# Creating a 2D array to store the stock prices at each node of the tree
stock_prices = matrix(0, nrow = steps + 1, ncol = steps + 1)
# Calculating the stock prices at each node of the tree
for (i in seq(1, steps + 1)) {
for (j in seq(1, i)) {
stock_prices[i, j] = S0 * (u ^ (i - j)) * (d ^ (j - 1))
}
}
# Creating a 2D array to store the option values at each node of the tree
option_values = matrix(0, nrow = steps + 1, ncol = steps + 1)
# Calculating the option values at each node of the tree
for (i in seq(steps, 0, -1)) {
for (j in seq(1, i + 1)) {
intr_val = ifelse(opt_type == "put", K - stock_prices[i, j], stock_prices[i, j] - K)
if (i == steps) {
# At the last step, the option value is the maximum of 0 and the intrinsic value
option_values[i, j] = max(0, intr_val)
} else {
# For other steps, the option value is the maximum of the intrinsic value and the discounted expected value
option_values[i, j] = max(intr_val,
(p * option_values[i + 1, j] + (1 - p) * option_values[i + 1, j + 1]) * exp(-r * dt)
)
}
}
}
# Returning the option value at the root node of the tree
return(option_values[1, 1])
}
american_option_price(100, 0.05, 0.2, 1, 95, 6, "call")
AmericanCallOpt::am_call_bin(100, 95, 0.05, 0.2, 1, 6)
american_option_price(100, 0.05, 0.2, 1, 95, 252, "call")
AmericanCallOpt::am_call_bin(100, 95, 0.05, 0.2, 1, 252)
install.package("derivmrkts")
install.packages('derivmrkts')
install.packages('derivmkts')
library(derivmkts)
library(derivmkts)
binomopt(100, 95, 0.2, 0.05, 1, nstep=252, american=TRUE)
library(derivmkts)
binomopt(100, 95, 0.2, 0.05, 1, 0, 252, american=TRUE)
american_option_price(100, 0.05, 0.2, 1, 95, 300, "call")
AmericanCallOpt::am_call_bin(100, 95, 0.05, 0.2, 1, 300)
library(derivmkts)
binomopt(100, 95, 0.2, 0.05, 1, 0, 300, american=TRUE)
american_option_price(100, 0.05, 0.2, 1, 95, 25, "call")
AmericanCallOpt::am_call_bin(100, 95, 0.05, 0.2, 1, 25)
library(derivmkts)
binomopt(100, 95, 0.2, 0.05, 1, 0, 25, american=TRUE)
AmericanCallOpt::am_call_bin(100, 95, 0.05, 0.2, 1, 252)
library(derivmkts)
binomopt(100, 95, 0.2, 0.05, 1, 0, 252, american=TRUE)
american_option_price(100, 0.05, 0.2, 1, 95, 252, "call")
american_option_price(100, 0.05, 0.2, 1, 95, 1000, "call")
AmericanCallOpt::am_call_bin(100, 95, 0.05, 0.2, 1, 1000)
library(derivmkts)
binomopt(100, 95, 0.2, 0.05, 1, 0, 1000, american=TRUE)
